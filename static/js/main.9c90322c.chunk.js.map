{"version":3,"sources":["components/VehicleMap.js","App.js","reportWebVitals.js","index.js"],"names":["mapboxgl","workerClass","MapboxWorker","accessToken","process","VehicleMap","vehicles","mapContainer","useRef","useState","lng","lat","zoom","useEffect","Map","container","current","style","layers","center","scrollZoom","disable","Container","ref","styled","div","App","feed","setFeed","setVehicles","fetch","headers","then","response","ok","json","console","log","data","entity","filter","f","vehicle","is_deleted","position","map","ft","f2","trip_update","id","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAOAA,IAASC,YAAcC,IACvBF,IAASG,YAAcC,mGAqDRC,I,EAAAA,EAnDf,YAAgC,EAAXC,SAAY,IACvBC,EAAeC,mBADO,EAENC,mBAAS,YAFH,mBAErBC,EAFqB,aAGND,oBAAU,YAHJ,mBAGrBE,EAHqB,aAIJF,mBAAS,KAJL,mBAIrBG,EAJqB,KAqC5B,OArC4B,KAM5BC,qBAAU,WACM,IAAIb,IAASc,IAAI,CACzBC,UAAWR,EAAaS,QAExBC,MAAO,CACH,QAAW,EACX,QAAW,CACP,eAAgB,CACZ,KAAQ,SACR,MAAS,CACL,gFAEJ,SAAY,MAGpBC,OAAQ,CACJ,CACI,GAAO,eACP,KAAQ,SACR,OAAU,eACV,QAAW,EACX,QAAW,MAIvBC,OAAQ,CAACT,EAAKC,GACdC,KAAMA,IAENQ,WAAWC,YAChB,IAGC,cAACC,EAAD,UACI,cAACR,EAAD,CAAKS,IAAKhB,OAchBe,EAAYE,IAAOC,IAAV,0BAETX,EAAMU,IAAOC,IAAV,8IASQD,IAAOC,IAAV,oGAMED,IAAOC,IAAV,6LCtBEC,MApDf,WAAgB,IAAD,EAEWjB,mBAAS,IAFpB,mBAENkB,EAFM,KAEAC,EAFA,OAGmBnB,mBAAS,IAH5B,mBAGNH,EAHM,KAGIuB,EAHJ,KA6Cb,OAvCAhB,qBAAU,WAIRiB,MAAM,6CAA8C,CAAEC,QAHtC,CACd,4BAA6B3B,sCAG5B4B,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElBC,QAAQC,IAAIJ,MAEbD,MAAK,SAAAM,GAAI,OAAIV,EAAQU,EAAKL,SAASM,aACrC,IAGH1B,qBAAU,WACRgB,EACEF,EAAKa,QAAO,SAAAC,GAAC,OAAIA,EAAEC,UAAYD,EAAEE,YAAcF,EAAEC,QAAQE,YACtDC,KACC,SAAAJ,GAAM,IAAD,EACCK,EAAKnB,EAAKa,QACZ,SAAAO,GAAE,aACAA,EAAGC,cACH,UAAAD,EAAGC,YAAYN,eAAf,eAAwBO,MAAOR,EAAEC,QAAQA,QAAQO,MAErD,OAAO,2BACFR,EAAEC,SADP,IAEEQ,IAAKT,EAAEC,QAAQA,QAAQO,GACvBD,YAAW,UAAEF,EAAG,UAAL,aAAE,EAAOE,oBAK7B,CAACrB,IAEJd,qBAAU,WACRuB,QAAQC,IAAI/B,KACX,CAACA,IAGF,cAAC,EAAD,UACE,cAAC,EAAD,CAAYA,SAAUA,OAOtBgB,EAAYE,IAAOC,IAAV,0BChDA0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9c90322c.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\n\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY\n\nfunction VehicleMap({vehicles}) {\n    const mapContainer = useRef()\n    const [lng, setLng] = useState(174.860478)\n    const [lat, setLat] = useState(-36.845794)\n    const [zoom, setZoom] = useState(10)\n\n    useEffect(() => {\n        const map = new mapboxgl.Map({\n            container: mapContainer.current,\n            // style: 'mapbox://styles/mapbox/dark-v10',\n            style: {\n                'version': 8,\n                'sources': {\n                    'raster-tiles': {\n                        'type': 'raster',\n                        'tiles': [\n                            'https://abcd.basemaps.cartocdn.com/rastertiles/dark_nolabels/{z}/{x}/{y}.png'\n                        ],\n                        'tileSize': 256,\n                    }\n                },\n                layers: [\n                    {\n                        'id':  'simple-tiles',\n                        'type': 'raster',\n                        'source': 'raster-tiles',\n                        'minzoom': 0,\n                        'maxzoom': 22\n                    }\n                ],\n            },\n            center: [lng, lat],\n            zoom: zoom\n        })\n        map.scrollZoom.disable()\n    }, [])\n\n    return (\n        <Container>\n            <Map ref={mapContainer} />\n            {/* <Vehicles>\n                {vehicles.map(v => (\n                <Vehicle key={v.key}>\n                    {v?.trip_update?.delay}\n                </Vehicle>\n                ))}\n            </Vehicles> */}\n        </Container>\n    )\n}\n\nexport default VehicleMap\n\nconst Container = styled.div``\n\nconst Map = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    background: #262626;\n`\n\nconst Vehicles = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`\n\nconst Vehicle = styled.div`\n  display: inline-block;\n  height: 20px;\n  width: 50px;\n  font-size: 10px;\n  background: pink;\n  margin: 1em;\n  text-align: center;\n  line-height: 20px;\n`\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport './App.css'\nimport VehicleMap from './components/VehicleMap';\n\nfunction App() {\n\n  const [feed, setFeed] = useState([])\n  const [vehicles, setVehicles] = useState([])\n\n  // Run when the app loads:\n  useEffect(() => {\n    const headers = {\n      \"Ocp-Apim-Subscription-Key\": process.env.REACT_APP_AT_API_KEY,\n    }\n    fetch(\"https://api.at.govt.nz/v2/public/realtime/\", { headers })\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        }\n        console.log(response)\n      })\n      .then(data => setFeed(data.response.entity))\n  }, [])\n\n  // Run when the feed changes:\n  useEffect(() => {\n    setVehicles(\n      feed.filter(f => f.vehicle && !f.is_deleted && f.vehicle.position)\n        .map(\n          f => {\n            let ft = feed.filter(\n              f2 =>\n                f2.trip_update &&\n                f2.trip_update.vehicle?.id === f.vehicle.vehicle.id\n            )\n            return {\n              ...f.vehicle,\n              key: f.vehicle.vehicle.id,\n              trip_update: ft[0]?.trip_update,\n            }\n          }\n        )\n    )\n  }, [feed])\n\n  useEffect(() => {\n    console.log(vehicles)\n  }, [vehicles])\n\n  return (\n    <Container>\n      <VehicleMap vehicles={vehicles} />\n    </Container>\n  );\n}\n\nexport default App\n\nconst Container = styled.div``\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/VehicleMap.js","components/BarChart.js","components/InfoPanel.js","App.js","reportWebVitals.js","index.js"],"names":["mapboxgl","workerClass","MapboxWorker","accessToken","process","VehicleMap","vehicles","refresh","palette","mapContainer","useRef","useState","lng","lat","zoom","container","setContainer","map","setMap","svg","setSvg","data","setData","useEffect","console","log","Map","current","style","layers","center","undefined","on","scrollZoom","disable","getCanvasContainer","d3","append","attr","length","v","id","key","pos","project","LngLat","position","longitude","latitude","occ_stat","occupancy_status","status","circles","selectAll","d","exit","transition","duration","remove","enter","x","y","ease","Container","ref","styled","div","BarChart","xlab","maxCount","setMaxCount","Math","max","apply","count","Label","Column","Bar","height","colour","BarCount","BarLabel","label","props","InfoPanel","total","Stats","Stat","App","feed","setFeed","setVehicles","occupancyTable","setOccupancyTable","delaysTable","setDelaysTable","occupancyPalette","reverse","fetching","fetchData","fetch","headers","then","response","ok","json","entity","interval","setInterval","refresh_rate","clearInterval","filter","f","is_deleted","vehicle","trip","timestamp","Date","now","ft","f2","trip_update","occ","tbl","Array","fill","i","delays","stop_time_update","arrival","delay","departure","Title","Charts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.faf061ee.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\n\nimport * as d3 from 'd3'\n\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY\n\nfunction VehicleMap({vehicles, refresh, palette}) {\n    const mapContainer = useRef()\n    const [lng] = useState(174.812378)\n    const [lat] = useState(-36.845794)\n    const [zoom] = useState(12)\n\n    const [container, setContainer] = useState()\n    const [map, setMap] = useState()\n    const [svg, setSvg] = useState()\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        console.log(\"-- set map --\")\n        setMap(\n            new mapboxgl.Map({\n                container: mapContainer.current,\n                style: {\n                    'version': 8,\n                    'sources': {\n                        'raster-tiles': {\n                            'type': 'raster',\n                            'tiles': [\n                                'https://abcd.basemaps.cartocdn.com/rastertiles/dark_nolabels/{z}/{x}/{y}.png'\n                            ],\n                            'tileSize': 256,\n                        }\n                    },\n                    layers: [\n                        {\n                            'id':  'simple-tiles',\n                            'type': 'raster',\n                            'source': 'raster-tiles',\n                            'minzoom': 0,\n                            'maxzoom': 22\n                        }\n                    ],\n                },\n                center: [lng, lat],\n                zoom: zoom\n            })\n        )\n\n        // return () => map.remove()\n    }, [lat, lng, zoom])\n\n    useEffect(() => {\n        if (map === undefined) return\n        console.log(\"-- set container --\")\n        map.on('load', () => {\n            map.scrollZoom.disable()\n            setContainer(map.getCanvasContainer())\n        })\n    }, [map])\n\n    useEffect(() => {\n        if (container === undefined) return\n        console.log(\"-- set svg --\")\n        setSvg(\n            d3.select(container)\n                .append('svg')\n                .attr(\"height\", \"100%\")\n                .attr(\"width\", \"100%\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"2\")\n                // .style(\"background\", \"pink\")\n        )\n\n        return () => setSvg()\n    }, [container])\n\n\n    useEffect(() => {\n        if (svg === undefined) return\n        if (vehicles.length === 0) return\n        setData(\n            vehicles.map(v => ({\n                id: v.key,\n                pos: map.project(\n                    new mapboxgl.LngLat(\n                        v.position.longitude,\n                        v.position.latitude\n                    )\n                ),\n                occ_stat: v.occupancy_status,\n                status: v.occupancy_status === undefined ? 0 : v.occupancy_status + 1,\n            }))\n        )\n    }, [svg, vehicles, map])\n\n    useEffect(() => {\n        if (data.length === 0) return\n\n        console.log(\"-- set data points --\")\n        let circles = svg\n            .selectAll('circle')\n            .data(data, d => d.id)\n\n        circles.exit()\n            .transition()\n            .duration(500)\n            .attr('r', 0)\n            .remove()\n\n        circles.enter()\n            .append('circle')\n            .style('fill', d => palette[d.status])\n            .attr('r', 0)\n            .attr('cx', d => d.pos.x)\n            .attr('cy', d => d.pos.y)\n            .transition()\n            .duration(500)\n            .attr('r', 5)\n\n        circles.transition()\n            .ease(d3.easeLinear)\n            .duration(refresh)\n            .attr('cx', d => d.pos.x)\n            .attr('cy', d => d.pos.y)\n            .style('fill', d => palette[d.status])\n\n        return () => svg.selectAll('circle').data([])\n    }, [data, svg, map, palette, refresh])\n\n    return (\n        <Container>\n            <Map ref={mapContainer} />\n        </Container>\n    )\n}\n\nexport default VehicleMap\n\nconst Container = styled.div``\n\nconst Map = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    background: #262626;\n`\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nfunction BarChart({data, xlab}) {\n\n    const [maxCount, setMaxCount] = useState(0)\n\n    useEffect(() => {\n        if (data.length === 0) return\n        setMaxCount(\n            Math.max.apply(Math, data.map(d => d.count))\n        )\n    }, [data])\n\n    return (\n        <Container>\n            <Label>{xlab}</Label>\n            {data.length && data.map(d => (\n                <Column>\n                    <Bar\n                        height={100 * (d.count / maxCount)}\n                        colour={d.colour}\n                        />\n                    <BarCount>{d.count}</BarCount>\n                    <BarLabel>{d.label}</BarLabel>\n                </Column>\n            ))}\n        </Container>\n    )\n}\n\nexport default BarChart\n\nconst Container = styled.div`\n    margin-bottom: 2em;\n    margin-top: 1em;\n    /* left: 2em;\n    bottom: 2em; */\n    /* height: 30vh; */\n    display: flex;\n    flex-direction: column;\n    /* background: rgba(0,0,0,0.3); */\n    /* padding: 0.5em; */\n    border-top: solid 4px white;\n    /* padding-top: 0.5em; */\n    border-bottom: solid 1px white;\n`\n\nconst Label = styled.div`\n    color: white;\n    /* width: 180px; */\n    /* text-align: right; */\n    font-weight: bold;\n    /* background: pink; */\n    padding: 0.5em;\n    border-bottom: solid 1px white;\n`\n\nconst Column = styled.div`\n    width: 100%;\n    flex: 1;\n    display: flex;\n    flex-direction: row-reverse;\n    color: white;\n    text-align: center;\n    font-weight: bold;\n    font-size: 0.7em;\n    overflow: hidden;\n    height: 2em;\n`\nconst Bar = styled.div`\n    flex: 1;\n    margin: 2px 0;\n    position: relative;\n\n    &:before {\n        content: '';\n        display: block;\n        position: absolute;\n        height: 100%;\n        left: 0;\n        width: ${props => props.height}%;\n        background: ${props => props.colour};\n        transition: width 5s ease-in-out;\n    }\n`\n\nconst BarCount = styled.div`\n    padding: 0.5em;\n    width: 3em;\n    align-items: center;\n    display: flex;\n    justify-content: center;\n`\n\nconst BarLabel = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    border-right: solid 1px white;\n    padding-right: 10px;\n    width: 180px;\n    overflow: hidden;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nfunction InfoPanel({total, refresh}) {\n    return (\n        <Container>\n            <p>\n                <strong>Real-time vehicle locations</strong> of buses and trains are obtained from Auckland Transport's public API. The data on the map is updated once every <strong>{refresh} seconds</strong>. Animations are interpolated between consecutive locations (so don't worry if you see a bus swimming in the Waitematā).\n            </p>\n            <p>\n                Map points are coloured by the bus's <strong>occupancy status</strong>, which indicates the number of passengers on board.\n            </p>\n\n            <Stats>\n                <Stat>\n                    <label>Total Vehicles:</label>\n                    <p>{total}</p>\n                </Stat>\n            </Stats>\n        </Container>\n    )\n}\n\nexport default InfoPanel\n\nconst Container = styled.div`\n    /* position: fixed;\n    top: 1.0em;\n    left: 1.0em;\n    width: 25vw;\n    z-index: 1000; */\n\n    width: 100%;\n    font-size: 1.2rem;\n    line-height: 1.5;\n    /* background: rgba(0,0,0,0.4); */\n    /* padding: 1em 2em 0; */\n    color: #fff;\n    /* border: 4px solid #fff; */\n\n    p {\n        margin: 0 0 1em 0;\n    }\n\n`\n\nconst Stats = styled.div`\n    font-size: 1.5em;\n`\nconst Stat = styled.div`\n    display: flex;\n    label {\n        /* display: inline-block; */\n        width: 50%;\n        text-align: right;\n        padding-right: 1em;\n    }\n`\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport * as d3 from 'd3'\n\nimport './App.css'\nimport VehicleMap from './components/VehicleMap';\nimport BarChart from './components/BarChart';\nimport InfoPanel from './components/InfoPanel';\n\nfunction App() {\n\n  // Timing information:\n  const refresh_rate = 20\n\n  const [feed, setFeed] = useState([])\n  const [vehicles, setVehicles] = useState([])\n  const [occupancyTable, setOccupancyTable] = useState([])\n  const [delaysTable, setDelaysTable] = useState([])\n\n\n  const specPal = [...d3.schemeSpectral[7], '#cecece']\n  const occupancyPalette = specPal.reverse()\n\n  // Run when the app loads:\n  useEffect(() => {\n    let fetching = false\n\n    const fetchData = () => {\n      if (fetching) return\n      console.log(\" --- fetch data --- \")\n      fetching = true\n\n      const headers = {\n        \"Ocp-Apim-Subscription-Key\": process.env.REACT_APP_AT_API_KEY,\n      }\n\n      fetch(\"https://api.at.govt.nz/v2/public/realtime/\", { headers })\n        .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n          console.log(response)\n        })\n        .then(data => setFeed(data.response.entity))\n        .then(() => {\n          fetching = false\n        })\n\n      return () => {\n        fetching = false\n      }\n    }\n\n    fetchData()\n    let interval = setInterval(() => fetchData(), refresh_rate * 1000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  // Run when the feed changes:\n  useEffect(() => {\n    setVehicles(\n      feed\n        .filter(\n          f => !f.is_deleted &&\n            f.vehicle &&\n            f.vehicle.trip &&\n            f.vehicle.timestamp > (Date.now() / 1000 - 5 * 60) &&\n            f.vehicle.position &&\n            f.vehicle.position.latitude > -38 &&\n            f.vehicle.position.latitude < -36 &&\n            f.vehicle.position.longitude > 174 &&\n            f.vehicle.position.longitude < 176\n        )\n        .map(\n          f => {\n            let ft = feed.filter(\n              f2 =>\n                f2.trip_update &&\n                f2.trip_update.vehicle?.id === f.vehicle.vehicle.id\n            )\n            return {\n              ...f.vehicle,\n              key: f.vehicle.vehicle.id,\n              trip_update: ft[0]?.trip_update,\n            }\n          }\n        )\n    )\n  }, [feed])\n\n  useEffect(() => {\n    console.log(vehicles)\n    // create occupancy table\n    let occ = vehicles.map(v => v.occupancy_status === undefined ? 0 : v.occupancy_status + 1)\n    let tbl = new Array(8).fill(0)\n    for (let i=0;i<occ.length;i++) {\n      tbl[occ[i]]++\n    }\n    setOccupancyTable([\n      {'label': 'Unknown', 'count': tbl[0], 'colour': occupancyPalette[0]},\n      {'label': 'Empty', 'count': tbl[1], 'colour': occupancyPalette[1]},\n      {'label': 'Many seats', 'count': tbl[2], 'colour': occupancyPalette[2]},\n      {'label': 'Few seats', 'count': tbl[3], 'colour': occupancyPalette[3]},\n      {'label': 'Standing room only', 'count': tbl[4], 'colour': occupancyPalette[4]},\n      // {'label': 'Crushed standing room only', 'count': tbl[5], 'colour': occupancyPalette[5]},\n      {'label': 'Full', 'count': tbl[6], 'colour': occupancyPalette[6]},\n      {'label': 'Not accepting passengers', 'count': tbl[7], 'colour': occupancyPalette[7]},\n    ])\n\n    let delays = vehicles.map(v => {\n      if (v.trip_update === undefined) return\n      if (v.trip_update.stop_time_update === undefined) return\n      return v.trip_update.stop_time_update.arrival ?\n        v.trip_update.stop_time_update?.arrival.delay :\n        v.trip_update.stop_time_update?.departure.delay\n    })\n\n    tbl = new Array(8).fill(0)\n    for (let i=0;i<delays.length;i++) {\n      if (delays[i] === undefined) tbl[0]++\n      else if (delays[i] <= -300) tbl[1]++\n      else if (delays[i] <= 60) tbl[2]++\n      else if (delays[i] >= 300) tbl[3]++\n      else if (delays[i] >= 600) tbl[4]++\n      else if (delays[i] >= 1200) tbl[5]++\n      else if (delays[i] >= 1800) tbl[6]++\n      else tbl[7]++\n    }\n    setDelaysTable([\n      {'label': 'No data', 'count': tbl[0], 'colour': '#95a5a6'},\n      {'label': '>5m early', 'count': tbl[1], 'colour': '#3c42a5'},\n      {'label': '1-5m early', 'count': tbl[2], 'colour': '#28aebb'},\n      {'label': 'On time', 'count': tbl[3], 'colour': '#26d926'},\n      {'label': '5-10m late', 'count': tbl[4], 'colour': '#f39c12'},\n      {'label': '10-20m late', 'count': tbl[5], 'colour': '#d35400'},\n      {'label': '20-30m late', 'count': tbl[6], 'colour': 'red'},\n      {'label': '30+m late', 'count': tbl[7], 'colour': '#990000'},\n    ])\n\n  }, [vehicles])\n\n\n\n  // useEffect(() => {\n  //   console.log(occupancyTable)\n  // }, [occupancyTable])\n\n  return (\n    <Container>\n      <VehicleMap vehicles={vehicles}\n        refresh={(refresh_rate - 1) * 1000}\n        palette={occupancyPalette}\n        />\n\n      <Title>\n        <h1>Real-time Public Transport Data</h1>\n        <h2>Vehicle Occupancy in Central Auckland</h2>\n      </Title>\n\n      <Charts>\n        <InfoPanel\n          total={vehicles.length}\n          refresh={refresh_rate}\n        />\n\n        <BarChart data={occupancyTable}\n          xlab=\"Occupancy Status\"\n          />\n        <BarChart data={delaysTable}\n          xlab=\"Arrival and Departure Delays\"\n          />\n      </Charts>\n    </Container>\n  );\n}\n\nexport default App\n\nconst Container = styled.div``\n\nconst Charts = styled.div`\n  position: fixed;\n  z-index: 5;\n  top: 2em;\n  right: 2em;\n  bottom: 2em;\n  width: 30em;\n  padding: 1em 2em;\n  background: rgba(0,0,0,0.7);\n  display: flex;\n  flex-direction: column;\n  /* justify-content: space-between; */\n  box-shadow: 5px 3px 10px 5px rgba(0,0,0,0.4);\n  border-radius: 5px;\n`\n\nconst Title = styled.div`\n  position: fixed;\n  z-index: 10;\n  top: 1em;\n  left: 0em;\n  color: black;\n  padding: 1em 3em;\n  width: 50vw;\n  text-align: right;\n  background: rgba(255,255,255,0.8);\n  box-shadow: 5px 3px 10px 10px rgba(0,0,0,0.4);\n  border-radius: 0 3px 3px 0;\n\n  h1 {\n    font-size: 45px;\n  }\n  h2 {\n    font-size: 30px;\n    font-style: italic;\n  }\n`\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
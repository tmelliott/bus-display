{"version":3,"sources":["components/VehicleMap.js","App.js","reportWebVitals.js","index.js"],"names":["mapboxgl","workerClass","MapboxWorker","accessToken","process","VehicleMap","vehicles","mapContainer","useRef","useState","lng","lat","zoom","container","setContainer","map","setMap","svg","setSvg","data","setData","useEffect","console","log","Map","current","style","layers","center","undefined","on","scrollZoom","disable","getCanvasContainer","d3","append","attr","length","v","id","key","pos","project","LngLat","position","longitude","latitude","circles","selectAll","d","exit","enter","x","y","transition","duration","Container","ref","styled","div","App","fetching","setFetching","feed","setFeed","setVehicles","fetchData","fetch","headers","then","response","ok","json","entity","interval","setInterval","clearInterval","filter","f","vehicle","is_deleted","ft","f2","trip_update","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSASAA,IAASC,YAAcC,IACvBF,IAASG,YAAcC,mGA8IRC,I,EAAAA,EA5If,YAAiC,IAAZC,EAAW,EAAXA,SACXC,EAAeC,mBADO,EAENC,mBAAS,YAFH,mBAErBC,EAFqB,aAGND,oBAAU,YAHJ,mBAGrBE,EAHqB,aAIJF,mBAAS,KAJL,mBAIrBG,EAJqB,aAMMH,sBANN,mBAMrBI,EANqB,KAMVC,EANU,OAONL,qBAPM,mBAOrBM,EAPqB,KAOhBC,EAPgB,OAQNP,qBARM,mBAQrBQ,EARqB,KAQhBC,EARgB,OASJT,mBAAS,IATL,mBASrBU,EATqB,KASfC,EATe,KA8H5B,OAnHAC,qBAAU,WACNC,QAAQC,IAAI,iBACZP,EACI,IAAIhB,IAASwB,IAAI,CACbX,UAAWN,EAAakB,QAExBC,MAAO,CACH,QAAW,EACX,QAAW,CACP,eAAgB,CACZ,KAAQ,SACR,MAAS,CACL,gFAEJ,SAAY,MAGpBC,OAAQ,CACJ,CACI,GAAO,eACP,KAAQ,SACR,OAAU,eACV,QAAW,EACX,QAAW,MAIvBC,OAAQ,CAAClB,EAAKC,GACdC,KAAMA,OAKf,IAEHS,qBAAU,gBACMQ,IAARd,IACJO,QAAQC,IAAI,uBACZR,EAAIe,GAAG,QAAQ,WACXf,EAAIgB,WAAWC,UACflB,EAAaC,EAAIkB,4BAEtB,CAAClB,IAEJM,qBAAU,WACN,QAAkBQ,IAAdhB,EAYJ,OAXAS,QAAQC,IAAI,iBACZL,EACIgB,IAAUrB,GACLsB,OAAO,OACPC,KAAK,SAAU,QACfA,KAAK,QAAS,QACdV,MAAM,WAAY,YAClBA,MAAM,UAAW,MAInB,kBAAMR,OACd,CAACL,IAGJQ,qBAAU,gBACMQ,IAARZ,GACoB,IAApBX,EAAS+B,SACbf,QAAQC,IAAI,kBACZH,EACId,EAASS,KAAI,SAAAuB,GAAC,MAAK,CACfC,GAAID,EAAEE,IACNC,IAAK1B,EAAI2B,QACL,IAAI1C,IAAS2C,OACTL,EAAEM,SAASC,UACXP,EAAEM,SAASE,mBAK5B,CAAC7B,EAAKX,IAETe,qBAAU,WACN,GAAoB,IAAhBF,EAAKkB,OAAT,CAEAf,QAAQC,IAAI,yBACZ,IAAIwB,EAAU9B,EACT+B,UAAU,UACV7B,KAAKA,GAAM,SAAA8B,GAAC,OAAIA,EAAEV,MA4BvB,OA1BAQ,EAAQG,OACHxB,MAAM,OAAQ,SAMnBqB,EAAQI,QACHhB,OAAO,UACPT,MAAM,OAAQ,OACdU,KAAK,IAAK,GACVA,KAAK,MAAM,SAAAa,GAAC,OAAIA,EAAER,IAAIW,KACtBhB,KAAK,MAAM,SAAAa,GAAC,OAAIA,EAAER,IAAIY,KACtBC,aACAC,SAAS,KACTnB,KAAK,IAAK,GAEfW,EAAQO,aACHC,SAAS,KACTnB,KAAK,MAAM,SAAAa,GAAC,OAAIA,EAAER,IAAIW,KACtBhB,KAAK,MAAM,SAAAa,GAAC,OAAIA,EAAER,IAAIY,KACtB3B,MAAM,OAAQ,QAKZ,kBAAMT,EAAI+B,UAAU,UAAU7B,KAAK,QAC3C,CAACA,EAAMF,IAGN,cAACuC,EAAD,UACI,cAAChC,EAAD,CAAKiC,IAAKlD,OAchBiD,EAAYE,IAAOC,IAAV,0BAETnC,EAAMkC,IAAOC,IAAV,8IASQD,IAAOC,IAAV,oGAMED,IAAOC,IAAV,6LCnGEC,MAlEf,WAAgB,IAAD,EAEmBnD,oBAAS,GAF5B,mBAENoD,EAFM,KAEIC,EAFJ,OAGWrD,mBAAS,IAHpB,mBAGNsD,EAHM,KAGAC,EAHA,OAImBvD,mBAAS,IAJ5B,mBAINH,EAJM,KAII2D,EAJJ,KAMPC,EAAY,WAChB,IAAIL,EAAJ,CACAvC,QAAQC,IAAI,wBACZuC,GAAY,GAcV,OAVFK,MAAM,6CAA8C,CAAEC,QAHtC,CACd,4BAA6BhE,sCAG5BiE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElBlD,QAAQC,IAAI+C,MAEbD,MAAK,SAAAlD,GAAI,OAAI6C,EAAQ7C,EAAKmD,SAASG,WACnCJ,MAAK,kBAAMP,GAAY,MAEjB,kBAAMA,GAAY,MAoC7B,OAhCAzC,qBAAU,WACR6C,IACA,IAAIQ,EAAWC,aAAY,kBAAMT,MAAa,KAE9C,OAAO,kBAAMU,cAAcF,MAC1B,IAGHrD,qBAAU,WACR4C,EACEF,EAAKc,QAAO,SAAAC,GAAC,OAAIA,EAAEC,UAAYD,EAAEE,YAAcF,EAAEC,QAAQnC,YACtD7B,KACC,SAAA+D,GAAM,IAAD,EACCG,EAAKlB,EAAKc,QACZ,SAAAK,GAAE,aACAA,EAAGC,cACH,UAAAD,EAAGC,YAAYJ,eAAf,eAAwBxC,MAAOuC,EAAEC,QAAQA,QAAQxC,MAErD,OAAO,2BACFuC,EAAEC,SADP,IAEEvC,IAAKsC,EAAEC,QAAQA,QAAQxC,GACvB4C,YAAW,UAAEF,EAAG,UAAL,aAAE,EAAOE,oBAK7B,CAACpB,IAEJ1C,qBAAU,cAEP,CAACf,IAGF,cAAC,EAAD,UACE,cAAC,EAAD,CAAYA,SAAUA,OAOtBkD,EAAYE,IAAOC,IAAV,0BC9DAyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b1eca920.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\n\nimport * as d3 from 'd3'\n\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY\n\nfunction VehicleMap({vehicles}) {\n    const mapContainer = useRef()\n    const [lng, setLng] = useState(174.860478)\n    const [lat, setLat] = useState(-36.845794)\n    const [zoom, setZoom] = useState(10)\n\n    const [container, setContainer] = useState()\n    const [map, setMap] = useState()\n    const [svg, setSvg] = useState()\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        console.log(\"-- set map --\")\n        setMap(\n            new mapboxgl.Map({\n                container: mapContainer.current,\n                // style: 'mapbox://styles/mapbox/dark-v10',\n                style: {\n                    'version': 8,\n                    'sources': {\n                        'raster-tiles': {\n                            'type': 'raster',\n                            'tiles': [\n                                'https://abcd.basemaps.cartocdn.com/rastertiles/dark_nolabels/{z}/{x}/{y}.png'\n                            ],\n                            'tileSize': 256,\n                        }\n                    },\n                    layers: [\n                        {\n                            'id':  'simple-tiles',\n                            'type': 'raster',\n                            'source': 'raster-tiles',\n                            'minzoom': 0,\n                            'maxzoom': 22\n                        }\n                    ],\n                },\n                center: [lng, lat],\n                zoom: zoom\n            })\n        )\n\n        // return () => map.remove()\n    }, [])\n\n    useEffect(() => {\n        if (map === undefined) return\n        console.log(\"-- set container --\")\n        map.on('load', () => {\n            map.scrollZoom.disable()\n            setContainer(map.getCanvasContainer())\n        })\n    }, [map])\n\n    useEffect(() => {\n        if (container === undefined) return\n        console.log(\"-- set svg --\")\n        setSvg(\n            d3.select(container)\n                .append('svg')\n                .attr(\"height\", \"100%\")\n                .attr(\"width\", \"100%\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"2\")\n                // .style(\"background\", \"pink\")\n        )\n\n        return () => setSvg()\n    }, [container])\n\n\n    useEffect(() => {\n        if (svg === undefined) return\n        if (vehicles.length === 0) return\n        console.log(\"-- set data --\")\n        setData(\n            vehicles.map(v => ({\n                id: v.key,\n                pos: map.project(\n                    new mapboxgl.LngLat(\n                        v.position.longitude,\n                        v.position.latitude\n                    )\n                ),\n            }))\n        )\n    }, [svg, vehicles])\n\n    useEffect(() => {\n        if (data.length === 0) return\n\n        console.log(\"-- set data points --\")\n        let circles = svg\n            .selectAll('circle')\n            .data(data, d => d.id)\n\n        circles.exit()\n            .style('fill', 'green')\n            // .transition()\n            // .duration(500)\n            // .attr('r', 0)\n            // .remove()\n\n        circles.enter()\n            .append('circle')\n            .style('fill', 'red')\n            .attr('r', 0)\n            .attr('cx', d => d.pos.x)\n            .attr('cy', d => d.pos.y)\n            .transition()\n            .duration(500)\n            .attr('r', 5)\n\n        circles.transition()\n            .duration(20 * 1000)\n            .attr('cx', d => d.pos.x)\n            .attr('cy', d => d.pos.y)\n            .style('fill', 'blue')\n            // .transition()\n            // .duration(500)\n            // .attr('r', 5)\n\n        return () => svg.selectAll('circle').data([])\n    }, [data, svg])\n\n    return (\n        <Container>\n            <Map ref={mapContainer} />\n            {/* <Vehicles>\n                {vehicles.map(v => (\n                <Vehicle key={v.key}>\n                    {v?.trip_update?.delay}\n                </Vehicle>\n                ))}\n            </Vehicles> */}\n        </Container>\n    )\n}\n\nexport default VehicleMap\n\nconst Container = styled.div``\n\nconst Map = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    background: #262626;\n`\n\nconst Vehicles = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`\n\nconst Vehicle = styled.div`\n  display: inline-block;\n  height: 20px;\n  width: 50px;\n  font-size: 10px;\n  background: pink;\n  margin: 1em;\n  text-align: center;\n  line-height: 20px;\n`\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport './App.css'\nimport VehicleMap from './components/VehicleMap';\n\nfunction App() {\n\n  const [fetching, setFetching] = useState(false)\n  const [feed, setFeed] = useState([])\n  const [vehicles, setVehicles] = useState([])\n\n  const fetchData = () => {\n    if (fetching) return\n    console.log(\" --- fetch data --- \")\n    setFetching(true)\n    const headers = {\n      \"Ocp-Apim-Subscription-Key\": process.env.REACT_APP_AT_API_KEY,\n    }\n    fetch(\"https://api.at.govt.nz/v2/public/realtime/\", { headers })\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        }\n        console.log(response)\n      })\n      .then(data => setFeed(data.response.entity))\n      .then(() => setFetching(false))\n\n      return () => setFetching(false)\n  }\n\n  // Run when the app loads:\n  useEffect(() => {\n    fetchData()\n    let interval = setInterval(() => fetchData(), 30 * 1000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  // Run when the feed changes:\n  useEffect(() => {\n    setVehicles(\n      feed.filter(f => f.vehicle && !f.is_deleted && f.vehicle.position)\n        .map(\n          f => {\n            let ft = feed.filter(\n              f2 =>\n                f2.trip_update &&\n                f2.trip_update.vehicle?.id === f.vehicle.vehicle.id\n            )\n            return {\n              ...f.vehicle,\n              key: f.vehicle.vehicle.id,\n              trip_update: ft[0]?.trip_update,\n            }\n          }\n        )\n    )\n  }, [feed])\n\n  useEffect(() => {\n    // console.log(vehicles)\n  }, [vehicles])\n\n  return (\n    <Container>\n      <VehicleMap vehicles={vehicles} />\n    </Container>\n  );\n}\n\nexport default App\n\nconst Container = styled.div``\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}